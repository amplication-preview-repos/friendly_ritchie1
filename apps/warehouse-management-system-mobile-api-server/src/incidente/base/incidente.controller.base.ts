/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IncidenteService } from "../incidente.service";
import { IncidenteCreateInput } from "./IncidenteCreateInput";
import { Incidente } from "./Incidente";
import { IncidenteFindManyArgs } from "./IncidenteFindManyArgs";
import { IncidenteWhereUniqueInput } from "./IncidenteWhereUniqueInput";
import { IncidenteUpdateInput } from "./IncidenteUpdateInput";

export class IncidenteControllerBase {
  constructor(protected readonly service: IncidenteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Incidente })
  async createIncidente(
    @common.Body() data: IncidenteCreateInput
  ): Promise<Incidente> {
    return await this.service.createIncidente({
      data: data,
      select: {
        createdAt: true,
        dataOcorrencia: true,
        descricaoIncidente: true,
        fotoIncidente: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Incidente] })
  @ApiNestedQuery(IncidenteFindManyArgs)
  async incidentes(@common.Req() request: Request): Promise<Incidente[]> {
    const args = plainToClass(IncidenteFindManyArgs, request.query);
    return this.service.incidentes({
      ...args,
      select: {
        createdAt: true,
        dataOcorrencia: true,
        descricaoIncidente: true,
        fotoIncidente: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Incidente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async incidente(
    @common.Param() params: IncidenteWhereUniqueInput
  ): Promise<Incidente | null> {
    const result = await this.service.incidente({
      where: params,
      select: {
        createdAt: true,
        dataOcorrencia: true,
        descricaoIncidente: true,
        fotoIncidente: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Incidente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIncidente(
    @common.Param() params: IncidenteWhereUniqueInput,
    @common.Body() data: IncidenteUpdateInput
  ): Promise<Incidente | null> {
    try {
      return await this.service.updateIncidente({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dataOcorrencia: true,
          descricaoIncidente: true,
          fotoIncidente: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Incidente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIncidente(
    @common.Param() params: IncidenteWhereUniqueInput
  ): Promise<Incidente | null> {
    try {
      return await this.service.deleteIncidente({
        where: params,
        select: {
          createdAt: true,
          dataOcorrencia: true,
          descricaoIncidente: true,
          fotoIncidente: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
