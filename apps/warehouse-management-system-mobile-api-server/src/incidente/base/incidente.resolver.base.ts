/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Incidente } from "./Incidente";
import { IncidenteCountArgs } from "./IncidenteCountArgs";
import { IncidenteFindManyArgs } from "./IncidenteFindManyArgs";
import { IncidenteFindUniqueArgs } from "./IncidenteFindUniqueArgs";
import { CreateIncidenteArgs } from "./CreateIncidenteArgs";
import { UpdateIncidenteArgs } from "./UpdateIncidenteArgs";
import { DeleteIncidenteArgs } from "./DeleteIncidenteArgs";
import { IncidenteService } from "../incidente.service";
@graphql.Resolver(() => Incidente)
export class IncidenteResolverBase {
  constructor(protected readonly service: IncidenteService) {}

  async _incidentesMeta(
    @graphql.Args() args: IncidenteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Incidente])
  async incidentes(
    @graphql.Args() args: IncidenteFindManyArgs
  ): Promise<Incidente[]> {
    return this.service.incidentes(args);
  }

  @graphql.Query(() => Incidente, { nullable: true })
  async incidente(
    @graphql.Args() args: IncidenteFindUniqueArgs
  ): Promise<Incidente | null> {
    const result = await this.service.incidente(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Incidente)
  async createIncidente(
    @graphql.Args() args: CreateIncidenteArgs
  ): Promise<Incidente> {
    return await this.service.createIncidente({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Incidente)
  async updateIncidente(
    @graphql.Args() args: UpdateIncidenteArgs
  ): Promise<Incidente | null> {
    try {
      return await this.service.updateIncidente({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Incidente)
  async deleteIncidente(
    @graphql.Args() args: DeleteIncidenteArgs
  ): Promise<Incidente | null> {
    try {
      return await this.service.deleteIncidente(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
