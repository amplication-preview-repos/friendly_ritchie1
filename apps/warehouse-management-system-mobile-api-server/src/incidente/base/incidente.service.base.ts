/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Incidente as PrismaIncidente } from "@prisma/client";

export class IncidenteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IncidenteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.incidente.count(args);
  }

  async incidentes(
    args: Prisma.IncidenteFindManyArgs
  ): Promise<PrismaIncidente[]> {
    return this.prisma.incidente.findMany(args);
  }
  async incidente(
    args: Prisma.IncidenteFindUniqueArgs
  ): Promise<PrismaIncidente | null> {
    return this.prisma.incidente.findUnique(args);
  }
  async createIncidente(
    args: Prisma.IncidenteCreateArgs
  ): Promise<PrismaIncidente> {
    return this.prisma.incidente.create(args);
  }
  async updateIncidente(
    args: Prisma.IncidenteUpdateArgs
  ): Promise<PrismaIncidente> {
    return this.prisma.incidente.update(args);
  }
  async deleteIncidente(
    args: Prisma.IncidenteDeleteArgs
  ): Promise<PrismaIncidente> {
    return this.prisma.incidente.delete(args);
  }
}
