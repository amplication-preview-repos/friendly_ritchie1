/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Produto } from "./Produto";
import { ProdutoCountArgs } from "./ProdutoCountArgs";
import { ProdutoFindManyArgs } from "./ProdutoFindManyArgs";
import { ProdutoFindUniqueArgs } from "./ProdutoFindUniqueArgs";
import { CreateProdutoArgs } from "./CreateProdutoArgs";
import { UpdateProdutoArgs } from "./UpdateProdutoArgs";
import { DeleteProdutoArgs } from "./DeleteProdutoArgs";
import { PedidoFindManyArgs } from "../../pedido/base/PedidoFindManyArgs";
import { Pedido } from "../../pedido/base/Pedido";
import { ProdutoService } from "../produto.service";
@graphql.Resolver(() => Produto)
export class ProdutoResolverBase {
  constructor(protected readonly service: ProdutoService) {}

  async _produtosMeta(
    @graphql.Args() args: ProdutoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Produto])
  async produtos(
    @graphql.Args() args: ProdutoFindManyArgs
  ): Promise<Produto[]> {
    return this.service.produtos(args);
  }

  @graphql.Query(() => Produto, { nullable: true })
  async produto(
    @graphql.Args() args: ProdutoFindUniqueArgs
  ): Promise<Produto | null> {
    const result = await this.service.produto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Produto)
  async createProduto(
    @graphql.Args() args: CreateProdutoArgs
  ): Promise<Produto> {
    return await this.service.createProduto({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Produto)
  async updateProduto(
    @graphql.Args() args: UpdateProdutoArgs
  ): Promise<Produto | null> {
    try {
      return await this.service.updateProduto({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Produto)
  async deleteProduto(
    @graphql.Args() args: DeleteProdutoArgs
  ): Promise<Produto | null> {
    try {
      return await this.service.deleteProduto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Pedido], { name: "pedidos" })
  async findPedidos(
    @graphql.Parent() parent: Produto,
    @graphql.Args() args: PedidoFindManyArgs
  ): Promise<Pedido[]> {
    const results = await this.service.findPedidos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
