/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Motorista } from "./Motorista";
import { MotoristaCountArgs } from "./MotoristaCountArgs";
import { MotoristaFindManyArgs } from "./MotoristaFindManyArgs";
import { MotoristaFindUniqueArgs } from "./MotoristaFindUniqueArgs";
import { CreateMotoristaArgs } from "./CreateMotoristaArgs";
import { UpdateMotoristaArgs } from "./UpdateMotoristaArgs";
import { DeleteMotoristaArgs } from "./DeleteMotoristaArgs";
import { MotoristaService } from "../motorista.service";
@graphql.Resolver(() => Motorista)
export class MotoristaResolverBase {
  constructor(protected readonly service: MotoristaService) {}

  async _motoristasMeta(
    @graphql.Args() args: MotoristaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Motorista])
  async motoristas(
    @graphql.Args() args: MotoristaFindManyArgs
  ): Promise<Motorista[]> {
    return this.service.motoristas(args);
  }

  @graphql.Query(() => Motorista, { nullable: true })
  async motorista(
    @graphql.Args() args: MotoristaFindUniqueArgs
  ): Promise<Motorista | null> {
    const result = await this.service.motorista(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Motorista)
  async createMotorista(
    @graphql.Args() args: CreateMotoristaArgs
  ): Promise<Motorista> {
    return await this.service.createMotorista({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Motorista)
  async updateMotorista(
    @graphql.Args() args: UpdateMotoristaArgs
  ): Promise<Motorista | null> {
    try {
      return await this.service.updateMotorista({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Motorista)
  async deleteMotorista(
    @graphql.Args() args: DeleteMotoristaArgs
  ): Promise<Motorista | null> {
    try {
      return await this.service.deleteMotorista(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
