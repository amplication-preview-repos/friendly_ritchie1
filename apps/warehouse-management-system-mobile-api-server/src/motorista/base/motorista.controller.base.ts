/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MotoristaService } from "../motorista.service";
import { MotoristaCreateInput } from "./MotoristaCreateInput";
import { Motorista } from "./Motorista";
import { MotoristaFindManyArgs } from "./MotoristaFindManyArgs";
import { MotoristaWhereUniqueInput } from "./MotoristaWhereUniqueInput";
import { MotoristaUpdateInput } from "./MotoristaUpdateInput";

export class MotoristaControllerBase {
  constructor(protected readonly service: MotoristaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Motorista })
  async createMotorista(
    @common.Body() data: MotoristaCreateInput
  ): Promise<Motorista> {
    return await this.service.createMotorista({
      data: data,
      select: {
        createdAt: true,
        id: true,
        nomeMotorista: true,
        numeroRegistro: true,
        updatedAt: true,
        veiculo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Motorista] })
  @ApiNestedQuery(MotoristaFindManyArgs)
  async motoristas(@common.Req() request: Request): Promise<Motorista[]> {
    const args = plainToClass(MotoristaFindManyArgs, request.query);
    return this.service.motoristas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        nomeMotorista: true,
        numeroRegistro: true,
        updatedAt: true,
        veiculo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Motorista })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async motorista(
    @common.Param() params: MotoristaWhereUniqueInput
  ): Promise<Motorista | null> {
    const result = await this.service.motorista({
      where: params,
      select: {
        createdAt: true,
        id: true,
        nomeMotorista: true,
        numeroRegistro: true,
        updatedAt: true,
        veiculo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Motorista })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMotorista(
    @common.Param() params: MotoristaWhereUniqueInput,
    @common.Body() data: MotoristaUpdateInput
  ): Promise<Motorista | null> {
    try {
      return await this.service.updateMotorista({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          nomeMotorista: true,
          numeroRegistro: true,
          updatedAt: true,
          veiculo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Motorista })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMotorista(
    @common.Param() params: MotoristaWhereUniqueInput
  ): Promise<Motorista | null> {
    try {
      return await this.service.deleteMotorista({
        where: params,
        select: {
          createdAt: true,
          id: true,
          nomeMotorista: true,
          numeroRegistro: true,
          updatedAt: true,
          veiculo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
