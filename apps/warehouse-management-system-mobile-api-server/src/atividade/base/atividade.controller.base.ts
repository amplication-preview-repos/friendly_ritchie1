/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AtividadeService } from "../atividade.service";
import { AtividadeCreateInput } from "./AtividadeCreateInput";
import { Atividade } from "./Atividade";
import { AtividadeFindManyArgs } from "./AtividadeFindManyArgs";
import { AtividadeWhereUniqueInput } from "./AtividadeWhereUniqueInput";
import { AtividadeUpdateInput } from "./AtividadeUpdateInput";

export class AtividadeControllerBase {
  constructor(protected readonly service: AtividadeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Atividade })
  async createAtividade(
    @common.Body() data: AtividadeCreateInput
  ): Promise<Atividade> {
    return await this.service.createAtividade({
      data: data,
      select: {
        createdAt: true,
        dataInicio: true,
        dataTermino: true,
        descricaoAtividade: true,
        id: true,
        statusAtividade: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Atividade] })
  @ApiNestedQuery(AtividadeFindManyArgs)
  async atividades(@common.Req() request: Request): Promise<Atividade[]> {
    const args = plainToClass(AtividadeFindManyArgs, request.query);
    return this.service.atividades({
      ...args,
      select: {
        createdAt: true,
        dataInicio: true,
        dataTermino: true,
        descricaoAtividade: true,
        id: true,
        statusAtividade: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Atividade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async atividade(
    @common.Param() params: AtividadeWhereUniqueInput
  ): Promise<Atividade | null> {
    const result = await this.service.atividade({
      where: params,
      select: {
        createdAt: true,
        dataInicio: true,
        dataTermino: true,
        descricaoAtividade: true,
        id: true,
        statusAtividade: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Atividade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAtividade(
    @common.Param() params: AtividadeWhereUniqueInput,
    @common.Body() data: AtividadeUpdateInput
  ): Promise<Atividade | null> {
    try {
      return await this.service.updateAtividade({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dataInicio: true,
          dataTermino: true,
          descricaoAtividade: true,
          id: true,
          statusAtividade: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Atividade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAtividade(
    @common.Param() params: AtividadeWhereUniqueInput
  ): Promise<Atividade | null> {
    try {
      return await this.service.deleteAtividade({
        where: params,
        select: {
          createdAt: true,
          dataInicio: true,
          dataTermino: true,
          descricaoAtividade: true,
          id: true,
          statusAtividade: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
