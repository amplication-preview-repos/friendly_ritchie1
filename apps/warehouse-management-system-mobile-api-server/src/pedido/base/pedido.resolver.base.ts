/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pedido } from "./Pedido";
import { PedidoCountArgs } from "./PedidoCountArgs";
import { PedidoFindManyArgs } from "./PedidoFindManyArgs";
import { PedidoFindUniqueArgs } from "./PedidoFindUniqueArgs";
import { CreatePedidoArgs } from "./CreatePedidoArgs";
import { UpdatePedidoArgs } from "./UpdatePedidoArgs";
import { DeletePedidoArgs } from "./DeletePedidoArgs";
import { Produto } from "../../produto/base/Produto";
import { PedidoService } from "../pedido.service";
@graphql.Resolver(() => Pedido)
export class PedidoResolverBase {
  constructor(protected readonly service: PedidoService) {}

  async _pedidosMeta(
    @graphql.Args() args: PedidoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pedido])
  async pedidos(@graphql.Args() args: PedidoFindManyArgs): Promise<Pedido[]> {
    return this.service.pedidos(args);
  }

  @graphql.Query(() => Pedido, { nullable: true })
  async pedido(
    @graphql.Args() args: PedidoFindUniqueArgs
  ): Promise<Pedido | null> {
    const result = await this.service.pedido(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pedido)
  async createPedido(@graphql.Args() args: CreatePedidoArgs): Promise<Pedido> {
    return await this.service.createPedido({
      ...args,
      data: {
        ...args.data,

        produto: args.data.produto
          ? {
              connect: args.data.produto,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Pedido)
  async updatePedido(
    @graphql.Args() args: UpdatePedidoArgs
  ): Promise<Pedido | null> {
    try {
      return await this.service.updatePedido({
        ...args,
        data: {
          ...args.data,

          produto: args.data.produto
            ? {
                connect: args.data.produto,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pedido)
  async deletePedido(
    @graphql.Args() args: DeletePedidoArgs
  ): Promise<Pedido | null> {
    try {
      return await this.service.deletePedido(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Produto, {
    nullable: true,
    name: "produto",
  })
  async getProduto(@graphql.Parent() parent: Pedido): Promise<Produto | null> {
    const result = await this.service.getProduto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
