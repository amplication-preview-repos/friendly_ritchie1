/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Pedido as PrismaPedido,
  Produto as PrismaProduto,
} from "@prisma/client";

export class PedidoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PedidoCountArgs, "select">): Promise<number> {
    return this.prisma.pedido.count(args);
  }

  async pedidos(args: Prisma.PedidoFindManyArgs): Promise<PrismaPedido[]> {
    return this.prisma.pedido.findMany(args);
  }
  async pedido(
    args: Prisma.PedidoFindUniqueArgs
  ): Promise<PrismaPedido | null> {
    return this.prisma.pedido.findUnique(args);
  }
  async createPedido(args: Prisma.PedidoCreateArgs): Promise<PrismaPedido> {
    return this.prisma.pedido.create(args);
  }
  async updatePedido(args: Prisma.PedidoUpdateArgs): Promise<PrismaPedido> {
    return this.prisma.pedido.update(args);
  }
  async deletePedido(args: Prisma.PedidoDeleteArgs): Promise<PrismaPedido> {
    return this.prisma.pedido.delete(args);
  }

  async getProduto(parentId: string): Promise<PrismaProduto | null> {
    return this.prisma.pedido
      .findUnique({
        where: { id: parentId },
      })
      .produto();
  }
}
