/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PedidoService } from "../pedido.service";
import { PedidoCreateInput } from "./PedidoCreateInput";
import { Pedido } from "./Pedido";
import { PedidoFindManyArgs } from "./PedidoFindManyArgs";
import { PedidoWhereUniqueInput } from "./PedidoWhereUniqueInput";
import { PedidoUpdateInput } from "./PedidoUpdateInput";

export class PedidoControllerBase {
  constructor(protected readonly service: PedidoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pedido })
  async createPedido(@common.Body() data: PedidoCreateInput): Promise<Pedido> {
    return await this.service.createPedido({
      data: {
        ...data,

        produto: data.produto
          ? {
              connect: data.produto,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dataPedido: true,
        id: true,

        produto: {
          select: {
            id: true,
          },
        },

        statusPedido: true,
        tipoPedido: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pedido] })
  @ApiNestedQuery(PedidoFindManyArgs)
  async pedidos(@common.Req() request: Request): Promise<Pedido[]> {
    const args = plainToClass(PedidoFindManyArgs, request.query);
    return this.service.pedidos({
      ...args,
      select: {
        createdAt: true,
        dataPedido: true,
        id: true,

        produto: {
          select: {
            id: true,
          },
        },

        statusPedido: true,
        tipoPedido: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pedido })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pedido(
    @common.Param() params: PedidoWhereUniqueInput
  ): Promise<Pedido | null> {
    const result = await this.service.pedido({
      where: params,
      select: {
        createdAt: true,
        dataPedido: true,
        id: true,

        produto: {
          select: {
            id: true,
          },
        },

        statusPedido: true,
        tipoPedido: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pedido })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePedido(
    @common.Param() params: PedidoWhereUniqueInput,
    @common.Body() data: PedidoUpdateInput
  ): Promise<Pedido | null> {
    try {
      return await this.service.updatePedido({
        where: params,
        data: {
          ...data,

          produto: data.produto
            ? {
                connect: data.produto,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dataPedido: true,
          id: true,

          produto: {
            select: {
              id: true,
            },
          },

          statusPedido: true,
          tipoPedido: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pedido })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePedido(
    @common.Param() params: PedidoWhereUniqueInput
  ): Promise<Pedido | null> {
    try {
      return await this.service.deletePedido({
        where: params,
        select: {
          createdAt: true,
          dataPedido: true,
          id: true,

          produto: {
            select: {
              id: true,
            },
          },

          statusPedido: true,
          tipoPedido: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
